# -*- coding: utf-8 -*-
"""
@author: Marcus Ã–stling, Joakim Lilja

Transform the data generated by getData.py

The transformation is done by choosing the right features and celltypes, removing
unnecessary meta data.
"""

import pandas as pd
import numpy as np
import sys
import ast

def isNaN(num):
    return num != num

if __name__ == '__main__':
    '''if len(sys.argv) < 2:
        print("Pass a .csv file as argument!") 
        sys.exit()
    '''
    
    # Choosing the features
    cols = ["surface", "volume", "soma_surface", "n_stems", "n_bifs", "n_branch", 
            "width", "height", "eucdistance", "pathdistance", 
            "branch_order", "contraction", "fragmentation", "partition_asymmetry", 
            "pk_classic", "bif_ampl_local", "fractal_dim", "length", "cell_type"]
    '''
    cols = ["surface", "volume", "soma_surface", "n_stems", "n_bifs", "n_branch", 
            "width", "height", "depth", "diameter", "eucdistance", "pathdistance", 
            "branch_order", "contraction", "fragmentation", "partition_asymmetry", 
            "pk_classic", "bif_ampl_local", "fractal_dim", "length", "cell_type"]
    '''
    
    #df = pd.read_csv(sys.argv[1])
    df = pd.read_csv("mousedata.csv")
    df2 = df[cols]
    dfMatrix = df2.as_matrix()
    
    #Brain-region(pyramidal)
    br = df['brain_region']
    brMatrix = br.as_matrix()    
    
    # Physical_integrity
    
    pi = df['physical_Integrity']
    piMatrix = pi.as_matrix()
    '''
    piValues = dict() # <string, int>
    
    for v in range(len(piMatrix)):
        if piMatrix[v] in piValues:
            piValues[piMatrix[v]] += 1
        else:
            piValues[piMatrix[v]] = 1
            
    for k, v in piValues.items():
        print(k," ", v)
    '''
    
     # Choosing physical_integrity
    pi_cols = ['Dendrites & Axon Complete', 'Dendrites & Axon Moderate',
               'Dendrites Complete, Axon Moderate', 
               'Dendrites Moderate', 'Dendrites Moderate, Axon Complete',
               'Dendrites Complete', 'Dendrites Moderate']
    
    piRemovePls = []
    for v in range(len(piMatrix)):
        if piMatrix[v] not in pi_cols:
            piRemovePls.append(v)
    
    
    # Choosing cell types
    cell_types = ['pyramidal', 'granule', 'medium spiny', 'sensory receptor',
                    'bipolar',
                    'ganglion', 'amacrine','dopaminergic',
                    'Motoneuron', 'Somatostatin (SOM)-positive',
                    'Parvalbumin (PV)-positive OR basket OR Fast-spiking',
                    'Neuropeptide Y (NPY)-positive', 'Martinotti','Purkinje','thalamocortical',
                    'stellate', 'prion protein (PrP) promoter-positive',
                    'Vasoactive Intestinal Peptide (VIP)-positive',
                    'Steroid Hormone Receptor Ad4BP-positive',
                    'callosal-projecting','periglomerular','mitral',
                    'Cajal-Retzius', 'Serotonin receptor type 3A(5HT3)-positive',
                    'tufted', 'neurogliaform', 'Plasma Retinol-Binding Protein-Positive',
                    'bitufted', 'tyrosine-hydroxylase-positive', 'Golgi' ,'translocating',
                    'low-threshold calcium spiking', 'Chandelier', 'Thick-tufted',
                    'shrub cell', 'corticothalamic', 'horizontally elongated',
                    'Neuronal Nitric Oxide Synthase (nNOS)-positive',
                    'deep projecting cell', 'single bouquet', 'Midbrain-projecting']   
    
    bad_cell_types = ['Glia', 'microglia']
    
    for row in range(len(dfMatrix)):
        if isNaN(dfMatrix[row][18]):
            continue
        types = ast.literal_eval(dfMatrix[row][18])
        foundPyramidal = False
        foundType = False
        for t in range(len(types)):
            if types[t] in bad_cell_types:
                piRemovePls.append(row)
            elif types[t] == 'pyramidal':
                foundPyramidal = True
            elif types[t] in cell_types:
                dfMatrix[row][18] = types[t]
                foundType = True
                break
            
        if foundPyramidal and not foundType:
            brainregion = ast.literal_eval(brMatrix[row])[0]
            dfMatrix[row][18] = 'pyramidal_'+brainregion
        elif not foundType:
            dfMatrix[row][18] = 'Others'
            
    
    df2 = pd.DataFrame(dfMatrix)
    rowsRemoved = 0
    for row in range(len(dfMatrix)):
        for col in range(len(dfMatrix[row])):
            if isNaN(dfMatrix[row][col]) or row in piRemovePls:
                df2 = df2.drop(df2.index[row-rowsRemoved])
                rowsRemoved+=1
                break
            

    df2.to_csv("mouse.csv")